#+TITLE: Berezhnev's GNU Emacs config
#+AUTHOR: Berezhnev Vladimir (Tell396)
#+DESCRIPTION: Berezhnev's personal Emacs config.
#+STARTUP: showeverything
#+EXPORT_FILE_NAME: ~/Org/html/config.html
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil ^:{}

I don't want to use init.el to config Emacs.  I want to use an org file to config Emacs because I like literate configs with lots of comments.  The following code block should be your init.el.  This tells init.el to use the source code blocks from this file (README.org).

* File structure of files
#+BEGIN_SRC example 
.
├── images
│   ├── black-hole-2.png
│   ├── black-hole.png
│   ├── emacs-e-medium.png
│   ├── emacs-e.png
│   ├── emacs-e-small.png   
│   └── RMS.png             <~ Best photo ever.
├── local-packages
│   └── company-go.el
├── README.org              <~ (NEW) All settings with comments
├── init.el                    <~ (OLD) Main init file
├── setting-font-face.el       <~ (OLD) All settings of custom font face
├── setting-lsp.el             <~ (OLD) Setting LSP Mode for many languages
└── setting-packages.el        <~ (OLD) Setting all packages with use-package
#+END_SRC

* Setting base of Emacs
** Functions
#+begin_src emacs-lisp
	(defun indent-org-block-automatically ()
		(when (org-in-src-block-p)
			(org-edit-special)
			(indent-region (point-min) (point-max))
			(org-edit-src-exit)))

	(run-at-time 1 10 'indent-org-block-automatically)
#+end_src

** Import local files
#+begin_src emacs-lisp
	(load "~/.emacs.d/local-packages/company-go")
	(require 'company-go)
#+end_src

** Disable backup and auto save
#+begin_src emacs-lisp
	;; Disable backup
	(setq backup-inhibited t)
	;; Disable auto save
	(setq auto-save-default nil)
#+end_src

** Pixelwise for frames
#+begin_src emacs-lisp
	(setq frame-resize-pixelwise t)
	(dotimes (n 3)
		(toggle-frame-maximized))
#+end_src

** Disable *scratch*, *Messages* and *Completions* buffers
#+begin_src emacs-lisp
	(setq-default message-log-max nil)
	(kill-buffer "*Messages*")

	(add-hook 'minibuffer-exit-hook
						'(lambda ()
							 (let ((buffer "*Completions*"))
								 (and (get-buffer buffer)
											(kill-buffer buffer)))))

	(setq initial-major-mode (quote fundamental-mode))

#+end_src

** Intefrace disablings
#+begin_src emacs-lisp
	(scroll-bar-mode -1)        ; Disable visible scrollbar
	(tool-bar-mode -1)          ; Disable the toolbar
	(tooltip-mode -1)           ; Disable tooltips
	(set-fringe-mode 10)        ; Give some breathing room
	(menu-bar-mode -1)          ; Disable the menu bar
#+end_src

** Setting keymap
#+begin_src emacs-lisp
	;; zoom in/out like we do everywhere else.
	(global-set-key (kbd "C-=") 'text-scale-increase)
	(global-set-key (kbd "C--") 'text-scale-decrease)
	(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
	(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
																					; Make ESC quit prompts
	(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

	(global-auto-revert-mode t)
	(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

#+begin_src emacs-lisp 
	(xterm-mouse-mode t)

	;; Prompt for y or n instead of yes or no.
	(use-package subr
		:no-require t
		:init
		(fset 'yes-or-no-p 'y-or-n-p))

	(setq-default tab-width 2) ; set default tab char's display width to 2 spaces
	(setq tab-width 2)         ; set current buffer's tab char's display width to 2 spaces

	(dolist (mode '(org-mode-hook ; Disable line numbers for some modes
									term-mode-hook
									shell-mode-hook
									treemacs-mode-hook
									eshell-mode-hook))
		(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Setting line numbers
#+begin_src emacs-lisp
	(global-display-line-numbers-mode t)
	(use-package display-line-numbers
		;;:straight nil
		:hook (prog-mode . display-line-numbers-mode)
		:custom
		;;(setq display-line-numbers-type 'relative)
		(display-line-numbers-width 4)
		(display-line-numbers-grow-only t)
		(display-line-numbers-width-start t)
		)
#+end_src

* Setting font face
** Setting fonts
#+begin_src emacs-lisp
	(set-face-attribute 'default nil
											:font "Fira Code"
											:height 110
											:weight 'medium)
	(set-face-attribute 'variable-pitch nil
											:font "Fira Code"
											:height 120
											:weight 'medium)
	(set-face-attribute 'fixed-pitch nil
											:font "Fira Code"
											:height 110
											:weight 'medium)
	;; Makes commented text and keywords italics.
	;; This is working in emacsclient but not emacs.
	;; Your font must have an italic face available.
	(set-face-attribute 'font-lock-comment-face nil
											:slant 'italic)
	(set-face-attribute 'font-lock-keyword-face nil
											:slant 'italic)

	;; Uncomment the following line if line spacing needs adjusting.
	(setq-default line-spacing 0.12)

	;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
	(add-to-list 'default-frame-alist '(font . "Fira Code"))
	;; changes certain keywords to symbols, such as lamda!
	(setq global-prettify-symbols-mode t)
#+end_src

** Setting and installing themes
#+begin_src emacs-lisp
	(load-theme 'atom-one-dark t)
	(use-package atom-one-dark
		:ensure t)

	(use-package moe-theme
		:ensure t)

	(use-package melancholy-theme
		:ensure t)

	(use-package solo-jazz-theme
		:ensure t)

	(use-package ef-themes
		:ensure t)

	(use-package doom-themes
		:ensure t
		:config
		;; Global settings (defaults)
		;; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
		;;       doom-themes-enable-italic t) ; if nil, italics is universally disabled
		;; Enable flashing mode-line on errors
		;; (doom-themes-visual-bell-config)
		;; Enable custom neotree theme (all-the-icons must be installed!)
		;;(doom-themes-neotree-config)
		;; or for treemacs users
		(setq doom-themes-treemacs-theme "all-the-icons") ; use "doom-colors" for less minimal icon theme
		(doom-themes-treemacs-config)
		;; Corrects (and improves) org-mode's native fontification.
		(doom-themes-org-config))
#+end_src

* Setting Packages
#+begin_src emacs-lisp
	(use-package pdf-tools
		:defer t
		:mode (("\\.pdf\\'" . pdf-view-mode))
		:config
		(pdf-tools-install)
		(setq-default pdf-view-display-size 'fit-page)
		:bind (:map pdf-view-mode-map
								("\\" . hydra-pdftools/body)
								("<s-spc>" .  pdf-view-scroll-down-or-next-page)
								("g"  . pdf-view-first-page)
								("G"  . pdf-view-last-page)
								("l"  . image-forward-hscroll)
								("h"  . image-backward-hscroll)
								("j"  . pdf-view-next-page)
								("k"  . pdf-view-previous-page)
								("e"  . pdf-view-goto-page)
								("u"  . pdf-view-revert-buffer)
								("al" . pdf-annot-list-annotations)
								("ad" . pdf-annot-delete)
								("aa" . pdf-annot-attachment-dired)
								("am" . pdf-annot-add-markup-annotation)
								("at" . pdf-annot-add-text-annotation)
								("y"  . pdf-view-kill-ring-save)
								("i"  . pdf-misc-display-metadata)
								("s"  . pdf-occur)
								("b"  . pdf-view-set-slice-from-bounding-box)
								("r"  . pdf-view-reset-slice)))

	;; (defhydra hydra-pdftools (:color blue :hint nil)
	;;   "
	;;                                                                      ╭───────────┐
	;;       Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
	;;   ╭──────────────────────────────────────────────────────────────────┴───────────╯
	;;         ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
	;;         ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
	;;         ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
	;;         ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
	;;    _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
	;;         ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
	;;         ^^_n_^^      ^ ^  _r_eset slice box
	;;         ^^^↓^^^
	;;         ^^_G_^^
	;;   --------------------------------------------------------------------------------
	;;        "
	;;   ("\\" hydra-master/body "back")
	;;   ("<ESC>" nil "quit")
	;;   ("al" pdf-annot-list-annotations)
	;;   ("ad" pdf-annot-delete)
	;;   ("aa" pdf-annot-attachment-dired)
	;;   ("am" pdf-annot-add-markup-annotation)
	;;   ("at" pdf-annot-add-text-annotation)
	;;   ("y"  pdf-view-kill-ring-save)
	;;   ("+" pdf-view-enlarge :color red)
	;;   ("-" pdf-view-shrink :color red)
	;;   ("0" pdf-view-scale-reset)
	;;   ("H" pdf-view-fit-height-to-window)
	;;   ("W" pdf-view-fit-width-to-window)
	;;   ("P" pdf-view-fit-page-to-window)
	;;   ("n" pdf-view-next-page-command :color red)
	;;   ("p" pdf-view-previous-page-command :color red)
	;;   ("d" pdf-view-dark-minor-mode)
	;;   ("b" pdf-view-set-slice-from-bounding-box)
	;;   ("r" pdf-view-reset-slice)
	;;   ("g" pdf-view-first-page)
	;;   ("G" pdf-view-last-page)
	;;   ("e" pdf-view-goto-page)
	;;   ("o" pdf-outline)
	;;   ("s" pdf-occur)
	;;   ("i" pdf-misc-display-metadata)
	;;   ("u" pdf-view-revert-buffer)
	;;   ("F" pdf-links-action-perfom)
	;;   ("f" pdf-links-isearch-link)
	;;   ("B" pdf-history-backward :color red)
	;;   ("N" pdf-history-forward :color red)
	;;   ("l" image-forward-hscroll :color red)
	;;   ("h" image-backward-hscroll :color red))

	(use-package elcord :defer t)

	(use-package org-superstar
		:ensure t
		:defer t
		:config
		(setq org-superstar-headline-bullets-list '("◉" "⬢" "○" "✸" "✿")))

	(use-package multi-term
		:bind
		("C-x q" . multi-term-dedicated-toggle) ;; Open multi-term quickly
		("C-x w" . multi-term)) ;; Open default multi-term without automate spliting

	(use-package evil
		:ensure t
		:init      ;; tweak evil's configuration before loading it
		;;(setq evil-want-integration t) ;; This is optional since it's already set to t by default.
		(setq evil-want-keybinding nil)
		(setq evil-vsplit-window-right t)
		(setq evil-split-window-below t)
		(evil-mode))
	(use-package evil-collection
		:after evil
		:ensure t
		:config
		(setq evil-collection-mode-list '(dashboard dired ibuffer))
		(evil-collection-init))
	;;(use-package evil-tutor
	;;	:ensure t)

	;; Evil multiple cursors
	(use-package evil-multiedit
		:after evil
		:bind
		(:map evil-normal-state-map
					("M-d". evil-multiedit-match-symbol-and-next)
					("M-D". evil-multiedit-match-symbol-and-prev)
					("C-M-d". evil-multiedit-match-all)
					:map evil-visual-state-map
					("M-d". evil-multiedit-match-and-next)
					("M-D". evil-multiedit-match-and-prev)
					("C-M-d". evil-multiedit-match-all)))

	(use-package fzf
		:ensure t
		:bind
		;; Don't forget to set keybinds!
		:config
		(setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
					fzf/executable "fzf"
					fzf/git-grep-args "-i --line-number %s"
					;; command used for `fzf-grep-*` functions
					;; example usage for ripgrep:
					;; fzf/grep-command "rg --no-heading -nH"
					fzf/grep-command "grep -nrH"
					;; If nil, the fzf buffer will appear at the top of the window
					fzf/position-bottom t
					fzf/window-height 15))

	(use-package general
		:config
		(general-evil-setup t))

	(defun enable-minor-mode (my-pair)
		"Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
		(if (buffer-file-name)
				(if (string-match (car my-pair) buffer-file-name)
						(funcall (cdr my-pair)))))

	(use-package treemacs
		:ensure t
		:defer t
		:init
		(with-eval-after-load 'winum
			(define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
		:config
		(progn
			(setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
						treemacs-deferred-git-apply-delay        0.5
						treemacs-directory-name-transformer      #'identity
						treemacs-display-in-side-window          t
						treemacs-eldoc-display                   'simple
						treemacs-file-event-delay                5000
						treemacs-file-extension-regex            treemacs-last-period-regex-value
						treemacs-file-follow-delay               0.2
						treemacs-file-name-transformer           #'identity
						treemacs-follow-after-init               t
						treemacs-expand-after-init               t
						treemacs-find-workspace-method           'find-for-file-or-pick-first
						treemacs-git-command-pipe                ""
						treemacs-goto-tag-strategy               'refetch-index
						treemacs-header-scroll-indicators        '(nil . "^^^^^^")
						treemacs-hide-dot-git-directory          t
						treemacs-indentation                     2
						treemacs-indentation-string              " "
						treemacs-is-never-other-window           nil
						treemacs-max-git-entries                 5000
						treemacs-missing-project-action          'ask
						treemacs-move-forward-on-expand          nil
						treemacs-no-png-images                   nil
						treemacs-no-delete-other-windows         t
						treemacs-project-follow-cleanup          nil
						treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
						treemacs-position                        'left
						treemacs-read-string-input               'from-child-frame
						treemacs-recenter-distance               0.1
						treemacs-recenter-after-file-follow      nil
						treemacs-recenter-after-tag-follow       nil
						treemacs-recenter-after-project-jump     'always
						treemacs-recenter-after-project-expand   'on-distance
						treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
						treemacs-show-cursor                     nil
						treemacs-show-hidden-files               nil
						treemacs-silent-filewatch                nil
						treemacs-silent-refresh                  nil
						treemacs-sorting                         'alphabetic-asc
						treemacs-select-when-already-in-treemacs 'move-back
						treemacs-space-between-root-nodes        t
						treemacs-tag-follow-cleanup              t
						treemacs-tag-follow-delay                1.5
						treemacs-text-scale                      nil
						treemacs-user-mode-line-format           nil
						treemacs-user-header-line-format         nil
						treemacs-wide-toggle-width               70
						treemacs-width                           35
						treemacs-width-increment                 1
						treemacs-width-is-initially-locked       t
						treemacs-workspace-switch-cleanup        nil)

			;; The default width and height of the icons is 22 pixels. If you are
			;; using a Hi-DPI display, uncomment this to double the icon size.
			;; (treemacs-resize-icons 48)

			(treemacs-follow-mode t)
			(treemacs-filewatch-mode t)
			(treemacs-fringe-indicator-mode 'always)
			(when treemacs-python-executable
				(treemacs-git-commit-diff-mode t))

			(pcase (cons (not (null (executable-find "git")))
									 (not (null treemacs-python-executable)))
				(`(t . t)
				 (treemacs-git-mode 'deferred))
				(`(t . _)
				 (treemacs-git-mode 'simple)))

			(treemacs-hide-gitignored-files-mode nil))
		:bind
		(:map global-map
					("M-0"       . treemacs-select-window)
					("C-x t 1"   . treemacs-delete-other-windows)
					("C-x t t"   . treemacs)
					("C-x t d"   . treemacs-select-directory)
					("C-x t B"   . treemacs-bookmark)
					("C-x t C-t" . treemacs-find-file)
					("C-x t M-t" . treemacs-find-tag)))

	(use-package treemacs-all-the-icons
		:ensure t)
	(treemacs-load-theme "all-the-icons")

	(use-package treemacs-evil
		:after (treemacs evil)
		:ensure t)

	(use-package format-all
		:ensure t
		:preface
		(defun ian/format-code ()
			"Auto-format whole buffer."
			(interactive)
			(if (derived-mode-p 'prolog-mode)
					(prolog-indent-buffer)
				(format-all-buffer)))
		:config
		(global-set-key (kbd "M-F") #'ian/format-code)
		(add-hook 'prog-mode-hook #'format-all-ensure-formatter))

	(use-package centaur-tabs
		:config
		(setq centaur-tabs-style "bar"
					centaur-tabs-height 32
					centaur-tabs-set-icons t
					centaur-tabs-set-modified-marker t
					;; centaur-tabs-show-navigation-buttons t
					centaur-tabs-set-bar 'over
					;; x-underline-at-descent-line t
					)
		(centaur-tabs-headline-match)
		;; (setq centaur-tabs-gray-out-icons 'buffer)
		;; (centaur-tabs-enable-buffer-reordering)
		;; (setq centaur-tabs-adjust-buffer-order t)
		(centaur-tabs-mode t)
		(setq uniquify-separator "/")
		(setq uniquify-buffer-name-style 'forward)
		(defun centaur-tabs-buffer-groups ()
			"`centaur-tabs-buffer-groups' control buffers' group rules.

		 Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
		 All buffer name start with * will group to \"Emacs\".
		 Other buffer group by `centaur-tabs-get-group-name' with project name."
			(list
			 (cond
				;; ((not (eq (file-remote-p (buffer-file-name)) nil))
				;; "Remote")
				((or (string-equal "*" (substring (buffer-name) 0 1))
						 (memq major-mode '(magit-process-mode
																magit-status-mode
																magit-diff-mode
																magit-log-mode
																magit-file-mode
																magit-blob-mode
																magit-blame-mode
																)))
				 "Emacs")
				((derived-mode-p 'prog-mode)
				 "Editing")
				((derived-mode-p 'dired-mode)
				 "Dired")
				((memq major-mode '(helpful-mode
														help-mode))
				 "Help")
				((memq major-mode '(org-mode
														org-agenda-clockreport-mode
														org-src-mode
														org-agenda-mode
														org-beamer-mode
														org-indent-mode
														org-bullets-mode
														org-cdlatex-mode
														org-agenda-log-mode
														diary-mode))
				 "OrgMode")
				(t
				 (centaur-tabs-get-group-name (current-buffer))))))
		:hook
		(dashboard-mode . centaur-tabs-local-mode)
		(term-mode . centaur-tabs-local-mode)
		(calendar-mode . centaur-tabs-local-mode)
		(org-agenda-mode . centaur-tabs-local-mode)
		(helpful-mode . centaur-tabs-local-mode)
		:bind
		("C-<prior>" . centaur-tabs-backward)
		("C-<next>" . centaur-tabs-forward)
		("C-c t s" . centaur-tabs-counsel-switch-group)
		("C-c t p" . centaur-tabs-group-by-projectile-project)
		("C-c t g" . centaur-tabs-group-buffer-groups)
		(:map evil-normal-state-map
					("g t" . centaur-tabs-forward)
					("g T" . centaur-tabs-backward)))


	(use-package doom-modeline
		:commands doom-modeline
		:custom
		(doom-modeline-set-timemachine-modeline)
		(doom-modeline-buffer-name t)
		;;(display-battery-mode 1)
		(doom-modeline-time-icon t)
		;; (doom-modeline-height 15)
		(doom-modeline-bar-width 3)
		:hook (after-init . doom-modeline-mode))

	(use-package parrot
		:ensure t
		:defer t)

	;; Needed for `:after char-fold' to work
	(use-package char-fold
		:custom
		(char-fold-symmetric t)
		(search-default-mode #'char-fold-to-regexp))

	(use-package reverse-im
		:ensure t ; install `reverse-im' using package.el
		:demand t ; always load it
		:after char-fold ; but only after `char-fold' is loaded
		:bind
		("M-T" . reverse-im-translate-word) ; fix a word in wrong layout
		:custom
		(reverse-im-char-fold t) ; use lax matching
		(reverse-im-read-char-advice-function #'reverse-im-read-char-include)
		(reverse-im-input-methods '("ukrainian-computer")) ; translate these methods
		:config
		(reverse-im-mode t)) ; turn the mode on

	(use-package projectile
		:ensure t
		:init
		(projectile-mode +1)
		:bind (:map projectile-mode-map
								("s-p" . projectile-command-map)
								("C-c p" . projectile-command-map)))

	;; Highlight TODO, FIXME, ... in any programming mode
	;; (use-package 'fic-mode
	;; 	:ensure t
	;; 	:hook 'prog-mode-hook 'fic-mode)

	;; Setting dashboard
	(use-package dashboard
		:init      ;; tweak dashboard config before loading it
		(setq dashboard-center-content t)
																					;(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
		(setq dashboard-set-heading-icons t)
		(setq dashboard-set-file-icons t)
		(setq dashboard-banner-logo-title "Emacs is more than a text editor!")
		(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
		(setq dashboard-startup-banner "~/.emacs.d/images/RMS.png")  ;; use custom image as banner
		(setq dashboard-items '(
														(recents . 5)
														;;(agenda . 5 )
														(bookmarks . 3)
														(projects . 5)))
		;;(registers . 3)))
		:config
		(dashboard-setup-startup-hook)
		(dashboard-modify-heading-icons '((recents . "file-text")
																			(bookmarks . "book"))))
#+end_src

* Setting LSP
#+begin_src emacs-lisp
	;;(lsp-treemacs-sync-mode 1)

	(add-hook 'web-mode-hook  'emmet-mode)
	(helm-mode)

	(use-package react-snippets)
#+end_src

** Setting Company
#+begin_src emacs-lisp
	;; Install company
	(use-package company
		:ensure t
		:defer 20
		;; This is not perfect yet. It completes too quickly outside programming modes, but while programming it is just right.
		:custom
		(company-idle-delay 0.1)
		(global-company-mode t)
		(debug-on-error nil) ;; otherwise this throws lots of errors on completion errors
		:config
		(define-key company-active-map (kbd "TAB") 'company-complete-selection)
		(define-key company-active-map (kbd "<tab>") 'company-complete-selection)
		(define-key company-active-map [return] 'company-complete-selection)
		(define-key company-active-map (kbd "RET") 'company-complete-selection)
		;; auto-complete compatibility
		(defun my-company-visible-and-explicit-action-p ()
			(and (company-tooltip-visible-p)
					 (company-explicit-action-p)))
		(defun company-ac-setup ()
			"Sets up `company-mode' to behave similarly to `auto-complete-mode'."
			(setq company-require-match nil)
			(setq company-auto-complete #'my-company-visible-and-explicit-action-p)
			(setq company-frontends '(company-echo-metadata-frontend
																company-pseudo-tooltip-unless-just-one-frontend-with-delay
																company-preview-frontend))
			(define-key company-active-map [tab]
				'company-select-next-if-tooltip-visible-or-complete-selection)
			(define-key company-active-map (kbd "TAB")
				'company-select-next-if-tooltip-visible-or-complete-selection))

		(company-ac-setup)
		(add-hook 'js2-mode-hook (lambda () (company-mode))))

	;; (use-package company
	;; 	:ensure t
	;; 	:config (add-hook 'prog-mode-hook 'company-mode)
	;; 	(global-set-key (kbd "M-i") 'company-complete))

	(use-package company-anaconda
		:defer
		:after company
		:config (add-to-list 'company-backends 'company-anaconda))

	;; Company mode
	(setq company-idle-delay 0)
	(setq company-minimum-prefix-length 1)
#+end_src

** Setting LSP-Mode
*** LSP-Mode
#+begin_src emacs-lisp
	(use-package lsp-mode
		:init
		;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
		(setq lsp-keymap-prefix "C-c l")
		:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
					 (go-mode . lsp)
					 (javascript-mode . lsp)
					 (typescript-mode . lsp)
					 ;; if you want which-key integration
					 (lsp-mode . lsp-enable-which-key-integration))
		:commands lsp)

	;; optionally
	(use-package lsp-ui :commands lsp-ui-mode)
	;; if you are helm user
	(use-package helm-lsp :commands helm-lsp-workspace-symbol)
	;; if you are ivy user
	(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
	;; Symbol highlighting
	(setq lsp-enable-symbol-highlighting nil)

	(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

	;; optionally if you want to use debugger
	(use-package dap-mode)
	;; (use-package dap-LANGUAGE) to load the dap adapter for your language

	;; optional if you want which-key integration
	;;(use-package which-key
	;;		:config
	;;		(which-key-mode))
#+end_src

*** JSON
#+begin_src emacs-lisp
	(use-package json-mode :ensure t :defer 20
		:custom
		(json-reformat:indent-width 2)
		:mode (("\\.bowerrc$"     . json-mode)
					 ("\\.jshintrc$"    . json-mode)
					 ("\\.json_schema$" . json-mode)
					 ("\\.json\\'" . json-mode))
		:bind (:package json-mode-map
										:map json-mode-map
										("C-c <tab>" . json-mode-beautify)))
#+end_src
*** Vue.js (disabled)
#+begin_src example
(use-package vue-mode
		:mode "\\.vue\\'"
		:config
		(add-hook 'vue-mode-hook #'lsp))

(setq vue-mode-packages
				'(vue-mode))

(setq vue-mode-excluded-packages '())
(defun vue-mode/init-vue-mode ()
		"Initialize my package"
		(use-package vue-mode))
#+end_src

*** TypeScript
#+begin_src emacs-lisp
	(use-package typescript-mode
		:after tree-sitter
		:config
		;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
		;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
		(define-derived-mode typescriptreact-mode typescript-mode
			"TypeScript TSX")

		;; use our derived mode for tsx files
		(add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
		;; by default, typescript-mode is mapped to the treesitter typescript parser
		;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
		(add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))
#+end_src

*** JavaScript
#+begin_src emacs-lisp
	(use-package web-mode  :ensure t
		:mode (("\\.js\\'" . web-mode)
					 ("\\.jsx\\'" . web-mode)
					 ("\\.ts\\'" . web-mode)
					 ;;("\\.tsx\\'" . web-mode)
					 ("\\.html\\'" . web-mode)
					 ;;("\\.vue\\'" . web-mode)
					 ("\\.json\\'" . web-mode))
		:commands web-mode
		:config
		(setq web-mode-content-types-alist
					'(("jsx" . "\\.js[x]?\\'")))
		)

	;; JSX syntax highlighting
	;;add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)) ;; auto-enable for .js/.jsx files
	;; (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))

	;; (use-package js2-mode :ensure t :defer 20
	;; 	:mode
	;; 	(("\\.js\\'" . js2-mode))
	;; 	:custom
	;; 	(js2-include-node-externs t)
	;; 	;;(js2-global-externs '("customElements"))
	;; 	(js2-highlight-level 3)
	;; 	(js2r-prefer-let-over-var t)
	;; 	(js2r-prefered-quote-type 2)
	;; 	(js-indent-align-list-continuation t)
	;; 	(global-auto-highlight-symbol-mode t)
	;; 	:config
	;; 	(setq js-indent-level 2)
	;; 	;; patch in basic private field support
	;; 	(advice-add #'js2-identifier-start-p
	;; 							:after-until
	;; 							(lambda (c) (eq c ?#))))

	;; (use-package javascript-mode
	;;   :after tree-sitter
	;;   :config
	;;   ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
	;;   ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
	;;   (define-derived-mode typescriptreact-mode typescript-mode
	;;     "JavaScript TSX")

	;;   ;; use our derived mode for tsx files
	;;   (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . javascript-mode))
	;;   ;; by default, typescript-mode is mapped to the treesitter typescript parser
	;;   ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
	;;   (add-to-list 'tree-sitter-major-mode-language-alist '(javascript-mode . jsx)))

	(add-hook 'web-mode-hook #'(lambda ()
															 (enable-minor-mode
																'("\\.jsx?\\'" . prettier-js-mode))))

	(add-hook 'web-mode-hook 'prettier-js-mode)
#+end_src

*** Golang
#+begin_src emacs-lisp
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
		(add-hook 'before-save-hook #'lsp-format-buffer t t)
		(add-hook 'before-save-hook #'lsp-organize-imports t t))

(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(lsp-register-custom-settings
		'(("gopls.completeUnimported" t t)
		("gopls.staticcheck" t t)))
#+end_src

*** Rust
[[https://rust-analyzer.github.io/manual.html#installation#Emacs][*Quick start with rust-analyzer*]]

** Setting Tree Sitter
#+begin_src emacs-lisp
(use-package tree-sitter
		:ensure t
		:config
		;; activate tree-sitter on any buffer containing code for which it has a parser available
		(global-tree-sitter-mode)
		;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
		;; by switching on and off
		(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
		:ensure t
		:after tree-sitter)

;; https://github.com/orzechowskid/tsi.el/
;; great tree-sitter-based indentation for typescript/tsx, css, json
;;(use-package tsi
;;  :after tree-sitter
;;  :quelpa (tsi :fetcher github :repo "orzechowskid/tsi.el")
;;  ;; define autoload definitions which when actually invoked will cause package to be loaded
;;  :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
;;  :init
;;  (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
;;  (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
;;  (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
;;  (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))

;; auto-format different source code files extremely intelligently
;; https://github.com/radian-software/apheleia
(use-package apheleia
		:ensure t
		:config
		(apheleia-global-mode +1))


;;(add-hook 'prog-mode-hook 'linum-mode)
(add-hook 'prog-mode-hook 'visual-line-mode)
(add-hook 'prog-mode-hook 'show-paren-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

* Setting performance
** Make startup faster by reducing the frequency of GB
Make startup faster by reducing the frequency of garbage collection.  The default is 800 kilobytes.  Measured in bytes.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** GC setting
Make gc pauses faster by decreasing the threshold.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Disabling garbage collection
#+begin_src emacs-lisp
	(defvar me/gc-cons-threshold 100000000)
	(setq gc-cons-threshold most-positive-fixnum
				gc-cons-percentage 0.6)
	(add-hook 'emacs-startup-hook
						(lambda ()
							(setq gc-cons-threshold me/gc-cons-threshold
										gc-cons-percentage 0.1)))
(defun me/defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun me/restore-garbage-collection-h ()
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold me/gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'me/defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'me/restore-garbage-collection-h)
#+end_src

** Disable site-run
#+begin_src emacs-lisp
(setq site-run-file nil)
#+end_src

** I/O acceleration
#+begin_src emacs-lisp
(when (boundp 'read-process-output-max)  
  (setq read-process-output-max (* 1024 1024)))
#+end_src

** Don't compress the font cache
#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src
